{"version":3,"sources":["js/Elements/deck.js","js/Elements/players.js","js/index.js"],"names":["RANKS","STICKS","Card","r","s","rank","stick","Deck","b","deck","card","value","parseInt","i","length","j","push","setValue","generateDeck","shuffled","randomPosition","Math","floor","random","unshift","splice","Player","h","hand","gameDeck","someCard","pop","divContainer","innerHTML","pos","element","div","document","createElement","cardIsRed","textContent","appendChild","className","pointsPlayer","pointsCrupier","shuffle","player","crupier","containerCardsPlayer","querySelector","buttons","pedir","plantarse","firstRound","pickCard","renderCard","watchPunctuation","askPlayer","playerObj","points","playerPickCard","yesOrNot","answer","console","log","roundGame","disabledBtn","disabled","notExceed21","playerValue","whoIsTheWinner","mostrarPuntuaciones","table","colorGuion","getCard","passTurn","addEventListener"],"mappings":"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","file":"js.6ce9a607.js","sourceRoot":"../src","sourcesContent":["// Clase del objeto deck y cards\n\nconst RANKS = ['A','2','3','4','5','6','7','8','9','10','J','Q','K']\nconst STICKS = ['♥','♠','♦','♣']\n\nexport class Card {\n    constructor(r = '', s = '') {\n      this.rank = r,\n      this.stick = s\n    }\n\n    getRank () {\n      return this.rank\n    }\n}\n\nexport class Deck {\n  constructor(b){\n    this.deck = b\n  }\n\n  setValue (card) {\n    let rank = card.rank\n    let  value = 0\n    \n    switch (rank) {\n      case 'A':\n        value = 11\n        break\n      case 'J':\n        value = 10\n        break\n      case 'Q':\n        value = 10\n        break\n      case 'K':\n        value = 10\n        break\n      default:\n        value = parseInt(rank)\n    }\n    return value\n  }\n\n  generateDeck () {\n    let deck = [];\n  \n    for (var i = 0; i < STICKS.length; i++) {\n      for (var j = 0; j < RANKS.length; j++) {\n        let card = new Card(RANKS[j]);\n        deck.push({ //Tengo que hacerlo así para poder leer luego los valores de 'rank', 'stick', y 'value' sin que me salga undefined\n          'rank': RANKS[j],\n          'stick': STICKS[i],\n          'value': this.setValue(card)\n        });\n      }\n    }  \n    return deck;\n  }\n\n  shuffle () {\n    let deck = this.generateDeck()\n    let shuffled = []\n    \n\n    while(deck.length > 0) {\n      let randomPosition = Math.floor(Math.random() * deck.length)\n      \n      shuffled.unshift(deck[randomPosition])\n      deck.splice(randomPosition, 1)\n    }\n    return shuffled\n  }\n}","import { Deck } from './deck.js';\n\nexport class Player {\n    constructor(h = []){\n    this.hand  = h\n    }\n\n    pickCard (gameDeck) {\n    let someCard = gameDeck.pop()\n\n    this.hand.push(someCard)\n    }\n\n    renderCard(divContainer){\n        divContainer.innerHTML = '' //Borra contenido\n        \n        for (let pos = 0; pos < this.hand.length; pos++){\n            let rank = this.hand[pos].rank,\n                stick = this.hand[pos].stick,\n                element = divContainer\n\n            //Construir carta en HTML\n            let div = document.createElement('div')\n            cardIsRed(stick, div)\n            div.textContent = `${rank}${stick}`\n            element.appendChild(div)\n        } \n    }\n}\n\nconst cardIsRed = (stick, div) => {\n    if (stick == '♥' || stick == '♦'){\n        div.className = `card cardRed`\n    } else {\n        div.className = `card`\n    }\n}","import { Deck } from './Elements/deck.js';\nimport { Player } from './Elements/players.js';\n\n\n\nlet deck = new Deck(),\ngameDeck = deck.shuffle()\n\nlet player = new Player(),\n    crupier = new Player()\n\nlet pointsPlayer, pointsCrupier\n\n\nconst containerCardsPlayer = document.querySelector('.cardsPlayer')\n\nconst buttons = {\n  pedir: document.querySelector('.pedir'),\n  plantarse: document.querySelector('.plantarse')\n}\n\n\n\n//Comienzo del juego\nconst firstRound = () => {\n\n  player.pickCard(gameDeck)\n  player.pickCard(gameDeck)\n\n  player.renderCard(containerCardsPlayer)\n\n  crupier.pickCard(gameDeck)\n\n  pointsPlayer = watchPunctuation(player)\n  if (pointsPlayer == 21){\n    askPlayer()\n  }\n}\n\n\n//Valorar puntuación\nconst watchPunctuation = (playerObj) => {\n  let points = 0\n\n  for (let i = 0; i < playerObj.hand.length; i++){\n    points = points + playerObj.hand[i].value\n  }\n  return points\n}\n\nconst playerPickCard = () => {\n  player.pickCard(gameDeck)\n  player.renderCard(containerCardsPlayer)\n  askPlayer()\n}\n\n//Preguntar al jugador si continuar o no\nconst askPlayer = (yesOrNot) => {\n  let answer = yesOrNot\n  \n  console.log(`Respuesta del jugador: %c ${answer}`, 'color:orange')\n\n  pointsPlayer = watchPunctuation(player)\n  roundGame()\n\n\n  if (pointsPlayer == 21) {\n    console.log(`%c JUGADOR se planta por tener 21 `, 'background:black; color:white')\n    disabledBtn()\n  } if (answer == false ) {\n    console.log(`%c JUGADOR se planta con ${pointsPlayer} `, 'background:violet; color:teal')\n    disabledBtn()\n  } \n}\n\nconst disabledBtn = () => {\n  buttons.pedir.disabled = true;\n  buttons.plantarse.disabled = true;\n}\n\nconst notExceed21 = (playerValue) => {\n  if (playerValue <= 21){\n    return true\n  } else {\n    console.log('%c  Pierde JUGADOR por tener:  ' + pointsPlayer, 'background:white; color: red; font-size: 12px')\n    disabledBtn()\n  }\n}\n\nconst whoIsTheWinner = (pointsPlayer, pointsCrupier) => {\n  if (pointsPlayer > pointsCrupier && notExceed21(pointsPlayer)){\n    console.log('%c  Gana JUGADOR con: '+ pointsPlayer, 'background:white; color: green; font-size: 12px')\n  }\n}\n\n// ######   FUNCION DE SEGUIMIENTO    ########\nconst mostrarPuntuaciones = () => {\n\n  console.log('Player')\n  console.table(player.hand)\n  console.log('Crupier')\n  console.table(crupier.hand)\n  \n  console.log(`Tamaño de la baraja: ${gameDeck.length}`)\n  \n  // Mostrar puntuación de las cartas\n  pointsPlayer = watchPunctuation(player)\n  pointsCrupier = watchPunctuation(crupier)\n  console.log (`Puntuacion del jugador: ${pointsPlayer}`)\n  console.log (`Puntuacion del crupier: ${pointsCrupier}`)\n\n}// ######  -FIN- FUNCION DE SEGUIMIENTO    ########\n\n\nconst roundGame = () => {\n  \n  let colorGuion = 'color: orange; font-size: 14px'\n\n  console.log(`%c---------   SIGUIENTE RONDA   ---------`, colorGuion)\n  \n  //console.log('Player')\n  console.table(player.hand)\n  \n  whoIsTheWinner(pointsPlayer, pointsCrupier)\n  \n}\n\n\nfirstRound()\n\n//test despues de preguntar\nmostrarPuntuaciones()\n\nconst getCard = () => playerPickCard()\nconst passTurn = () => askPlayer(false)\n\nbuttons.pedir.addEventListener('click',getCard)\nbuttons.plantarse.addEventListener('click', passTurn)\n\n\n\n"]}