{"version":3,"sources":["js/Elements/deck.js","js/Elements/players.js","js/index.js"],"names":["RANKS","STICKS","Card","r","s","rank","stick","Deck","b","deck","card","value","parseInt","i","length","j","push","setValue","generateDeck","shuffled","randomPosition","Math","floor","random","unshift","splice","Player","h","hand","gameDeck","someCard","pop","divContainer","innerHTML","pos","element","div","document","createElement","cardIsRed","textContent","appendChild","className","pointsPlayer","pointsCrupier","shuffle","player","crupier","CONTAINER","CardsPlayer","querySelector","CardsCrupier","BUTTONS","pedir","plantarse","restart","divBotonera","SCORE","WINNER","firstRound","pickCard","renderCard","refreshScore","printScore","askPlayer","watchPunctuation","playerObj","points","playerPickCard","yesOrNot","answer","whoIsTheWinner","disabledBtn","reload","window","location","disabled","classList","add","remove","addEventListener","printInHTMLTheWinner","notExceed21","playerValue","pPlayer","pCrupier","crupierRound","getCard","passTurn"],"mappings":"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","file":"js.9066cc5f.js","sourceRoot":"../src","sourcesContent":["// Clase del objeto deck y cards\n\nconst RANKS = ['A','2','3','4','5','6','7','8','9','10','J','Q','K']\nconst STICKS = ['♥','♠','♦','♣']\n\nexport class Card {\n    constructor(r = '', s = '') {\n      this.rank = r,\n      this.stick = s\n    }\n\n    getRank () {\n      return this.rank\n    }\n}\n\nexport class Deck {\n  constructor(b){\n    this.deck = b\n  }\n\n  setValue (card) {\n    let rank = card.rank\n    let  value = 0\n    \n    switch (rank) {\n      case 'A':\n        value = 11\n        break\n      case 'J':\n        value = 10\n        break\n      case 'Q':\n        value = 10\n        break\n      case 'K':\n        value = 10\n        break\n      default:\n        value = parseInt(rank)\n    }\n    return value\n  }\n\n  generateDeck () {\n    let deck = [];\n  \n    for (var i = 0; i < STICKS.length; i++) {\n      for (var j = 0; j < RANKS.length; j++) {\n        let card = new Card(RANKS[j]);\n        deck.push({ //Tengo que hacerlo así para poder leer luego los valores de 'rank', 'stick', y 'value' sin que me salga undefined\n          'rank': RANKS[j],\n          'stick': STICKS[i],\n          'value': this.setValue(card)\n        });\n      }\n    }  \n    return deck;\n  }\n\n  shuffle () {\n    let deck = this.generateDeck()\n    let shuffled = []\n    \n\n    while(deck.length > 0) {\n      let randomPosition = Math.floor(Math.random() * deck.length)\n      \n      shuffled.unshift(deck[randomPosition])\n      deck.splice(randomPosition, 1)\n    }\n    return shuffled\n  }\n}","import { Deck } from './deck.js';\n\nexport class Player {\n    constructor(h = []){\n    this.hand  = h\n    }\n\n    pickCard (gameDeck) {\n    let someCard = gameDeck.pop()\n\n    this.hand.push(someCard)\n    }\n\n    renderCard(divContainer){\n        divContainer.innerHTML = '' //Borra contenido\n        \n        for (let pos = 0; pos < this.hand.length; pos++){\n            let rank = this.hand[pos].rank,\n                stick = this.hand[pos].stick,\n                element = divContainer\n\n            //Construir carta en HTML\n            let div = document.createElement('div')\n            cardIsRed(stick, div)\n            div.textContent = `${rank}${stick}`\n            element.appendChild(div)\n        } \n    }\n}\n\nconst cardIsRed = (stick, div) => {\n    if (stick == '♥' || stick == '♦'){\n        div.className = `card cardRed`\n    } else {\n        div.className = `card`\n    }\n}","import { Deck } from './Elements/deck.js';\nimport { Player } from './Elements/players.js';\n\n\n// ########    VARIABLES GLOBALES   ##############\nlet deck = new Deck(),\ngameDeck = deck.shuffle()\n\nlet player = new Player(),\n    crupier = new Player()\n\nlet pointsPlayer, pointsCrupier\n\n\n// ########    SELECTORES HTML   ##############\nconst CONTAINER = {\n  CardsPlayer: document.querySelector('.cardsPlayer'),\n  CardsCrupier: document.querySelector('.cardsCrupier')\n}\n\nconst BUTTONS = {\n  pedir: document.querySelector('.pedir'),\n  plantarse: document.querySelector('.plantarse'),\n  restart: document.querySelector('.restart'),\n  divBotonera: document.querySelector('.botonera')\n}\n\nconst SCORE = {\n  player: document.querySelector('.pointsPlayer'),\n  crupier: document.querySelector('.pointsCrupier')\n}\n\nconst WINNER = document.querySelector('.winner')\n\n// ########    FUNCIONES   ##############\nconst firstRound = () => {\n\n  player.pickCard(gameDeck)\n  player.pickCard(gameDeck)\n  player.renderCard(CONTAINER.CardsPlayer)\n\n  crupier.pickCard(gameDeck)\n  crupier.renderCard(CONTAINER.CardsCrupier)\n\n  refreshScore(player, crupier)\n  printScore()\n  if (pointsPlayer == 21){\n    askPlayer()\n  }\n}\n\nconst printScore = () => {\n  SCORE.crupier.textContent = pointsCrupier\n  SCORE.player.textContent = pointsPlayer\n}\n\nconst refreshScore = (player, crupier) => {\n  pointsPlayer = watchPunctuation(player)\n  pointsCrupier = watchPunctuation(crupier)\n}\n\n//Valorar puntuación\nconst watchPunctuation = (playerObj) => {\n  let points = 0\n\n  for (let i = 0; i < playerObj.hand.length; i++){\n    points = points + playerObj.hand[i].value\n  }\n  return points\n}\n\nconst playerPickCard = () => {\n  player.pickCard(gameDeck)\n  player.renderCard(CONTAINER.CardsPlayer)\n  askPlayer()\n}\n\n//Preguntar al jugador si continuar o no\nconst askPlayer = (yesOrNot) => {\n  let answer = yesOrNot\n  \n  pointsPlayer = watchPunctuation(player)\n  whoIsTheWinner(pointsPlayer, pointsCrupier)\n\n  if (pointsPlayer == 21) {\n    disabledBtn()\n  } if (answer == false ) {\n    disabledBtn()\n  } \n}\n\nconst reload = () => {\n  window.location.reload(false)\n}\n\nconst disabledBtn = () => {\n  BUTTONS.pedir.disabled = true;\n  BUTTONS.plantarse.disabled = true;\n  BUTTONS.pedir.classList.add('hidden')\n  BUTTONS.plantarse.classList.add('hidden')\n  BUTTONS.restart.classList.remove('hidden')\n  BUTTONS.restart.addEventListener('click',reload)\n  printInHTMLTheWinner(pointsPlayer, pointsCrupier)\n}\n\nconst notExceed21 = (playerValue) => {\n  if (playerValue <= 21){\n    return true\n  } else {\n    disabledBtn()\n  }\n}\n\nconst whoIsTheWinner = (pointsPlayer, pointsCrupier) => {\n  printScore()\n  notExceed21(pointsPlayer)\n  if (pointsPlayer == 21 ) {\n    disabledBtn()\n  } else if (pointsPlayer === pointsCrupier){\n    disabledBtn()\n  } else if (pointsPlayer > 21){\n    disabledBtn()\n  } else if (pointsPlayer > pointsCrupier) {\n    disabledBtn()\n  } else {\n    disabledBtn()\n    }\n}\n\nconst printInHTMLTheWinner = (pointsPlayer, pointsCrupier) => {\n\n  let pPlayer = pointsPlayer,\n      pCrupier = pointsCrupier\n//¿Quien es el ganador?\nif (pPlayer == 21 ) {\n  WINNER.textContent ='BLACKJACK'\n} else if (pPlayer === pCrupier){\n  WINNER.textContent ='EMPATE'\n} else if (pPlayer > 21){\n  WINNER.textContent ='Gana CRUPIER'\n} else if (pPlayer > pCrupier) {\n  WINNER.textContent ='Gana JUGADOR'\n} else {\n  WINNER.textContent ='Gana CRUPIER'\n  }\n\n// Imprime jugador en pantalla\n  WINNER.classList.remove('hidden')\n}\n\nconst crupierRound = () => {\n\n// IA del crupier\n// - Despues de que el jugador se plane comienza su turno\n// - Si tienes menos de 16 sigue pidiendo, y con 17 se planta\n\n    for (let i = 0; pointsCrupier < 15; i++){\n      refreshScore(player, crupier)\n      if (pointsCrupier < 16 ){\n      crupier.pickCard(gameDeck)\n      crupier.renderCard(CONTAINER.CardsCrupier)\n      printScore()\n      }\n      whoIsTheWinner(pointsPlayer, pointsCrupier)\n    }\n}\n\nfirstRound()\n\nconst getCard = () => playerPickCard()\nconst passTurn = () => askPlayer(false)\n\nBUTTONS.pedir.addEventListener('click',getCard)\nBUTTONS.plantarse.addEventListener('click', passTurn)\nBUTTONS.plantarse.addEventListener('click', crupierRound)"]}